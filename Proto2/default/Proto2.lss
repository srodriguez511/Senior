
Proto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005b  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000545  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d5  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000432  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011c  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000298  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <USART_Init>:
		
	}
	return 0;
}
void USART_Init( unsigned int baud )
{
  92:	90 bd       	out	0x20, r25	; 32
	UBRRH = (baud >> 8); ///Set baud rate
	UBRRL = baud;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Transmit>
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
  a4:	8c b9       	out	0x0c, r24	; 12
 }
  a6:	08 95       	ret

000000a8 <USART_Receive>:
unsigned char USART_Receive( void )
{
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <USART_Receive>
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
	return UDR; //Get and return received data from buffer 
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <convert>:

//convert the ascii chars to dec 
int convert(char achar){
  b0:	80 33       	cpi	r24, 0x30	; 48
  b2:	19 f4       	brne	.+6      	; 0xba <convert+0xa>
  b4:	20 e3       	ldi	r18, 0x30	; 48
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	2a c0       	rjmp	.+84     	; 0x10e <convert+0x5e>
  if(achar == '0')  	 
  	return 48;
  else if(achar == '1')  
  ba:	81 33       	cpi	r24, 0x31	; 49
  bc:	19 f4       	brne	.+6      	; 0xc4 <convert+0x14>
  be:	21 e3       	ldi	r18, 0x31	; 49
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	25 c0       	rjmp	.+74     	; 0x10e <convert+0x5e>
  	return 49;
  else if(achar == '2')  
  c4:	82 33       	cpi	r24, 0x32	; 50
  c6:	19 f4       	brne	.+6      	; 0xce <convert+0x1e>
  c8:	22 e3       	ldi	r18, 0x32	; 50
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	20 c0       	rjmp	.+64     	; 0x10e <convert+0x5e>
  	return 50;
  else if(achar == '3')  
  ce:	83 33       	cpi	r24, 0x33	; 51
  d0:	19 f4       	brne	.+6      	; 0xd8 <convert+0x28>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	1b c0       	rjmp	.+54     	; 0x10e <convert+0x5e>
  	return 51;
  else if(achar == '4')  
  d8:	84 33       	cpi	r24, 0x34	; 52
  da:	19 f4       	brne	.+6      	; 0xe2 <convert+0x32>
  dc:	24 e3       	ldi	r18, 0x34	; 52
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	16 c0       	rjmp	.+44     	; 0x10e <convert+0x5e>
  	return 52;
  else if(achar == '5')  
  e2:	85 33       	cpi	r24, 0x35	; 53
  e4:	19 f4       	brne	.+6      	; 0xec <convert+0x3c>
  e6:	25 e3       	ldi	r18, 0x35	; 53
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	11 c0       	rjmp	.+34     	; 0x10e <convert+0x5e>
  	return 53;
  else if(achar == '6')  
  ec:	86 33       	cpi	r24, 0x36	; 54
  ee:	19 f4       	brne	.+6      	; 0xf6 <convert+0x46>
  f0:	26 e3       	ldi	r18, 0x36	; 54
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	0c c0       	rjmp	.+24     	; 0x10e <convert+0x5e>
  	return 54;
  else if(achar == '7')  
  f6:	87 33       	cpi	r24, 0x37	; 55
  f8:	19 f4       	brne	.+6      	; 0x100 <convert+0x50>
  fa:	27 e3       	ldi	r18, 0x37	; 55
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	07 c0       	rjmp	.+14     	; 0x10e <convert+0x5e>
  	return 55;
  else if(achar == '8')  
 100:	88 33       	cpi	r24, 0x38	; 56
 102:	19 f0       	breq	.+6      	; 0x10a <convert+0x5a>
 104:	29 e3       	ldi	r18, 0x39	; 57
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <convert+0x5e>
 10a:	28 e3       	ldi	r18, 0x38	; 56
 10c:	30 e0       	ldi	r19, 0x00	; 0
  	return 56;
  else					 
  	return 57;
}
 10e:	c9 01       	movw	r24, r18
 110:	08 95       	ret

00000112 <main>:
void USART_Init(unsigned int baud); //Init Baud
void USART_Transmit(unsigned char data); //Transmission
unsigned char USART_Receive(void); //Receive
int convert(char);

int main(){
 112:	8f 92       	push	r8
 114:	9f 92       	push	r9
 116:	af 92       	push	r10
 118:	bf 92       	push	r11
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	unsigned char data2; //Hold the data we send/receive
	unsigned char storage[3];
	int hun = 0, ten = 0, one = 0, final = 0;
	int base = 48;
	DDRB = 0b11111111;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 bb       	out	0x17, r24	; 23
	}
	return 0;
}
void USART_Init( unsigned int baud )
{
	UBRRH = (baud >> 8); ///Set baud rate
 12e:	10 bc       	out	0x20, r1	; 32
	UBRRL = baud;
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	80 bd       	out	0x20, r24	; 32

	USART_Init(51); //Initilize to 9600bps
	for(;;){

        //I1 is 1000 (S0 S1 S2 S3) - PB3 is high
		PORTB = (1 << PB2) | (1 << PB3) | (0 << PB4) | (0 << PB5) | (0 << PB6);			
 13c:	fc e0       	ldi	r31, 0x0C	; 12
 13e:	af 2e       	mov	r10, r31
  			one = one - base;
  
 			final = hun + ten + one; //final value should match storage

			//test cases
			if(final >= 40 && final <= 80){ //vibrate if
 140:	e4 e6       	ldi	r30, 0x64	; 100
 142:	8e 2e       	mov	r8, r30
 144:	91 2c       	mov	r9, r1
						_delay_ms(125);
					}
				}
				else{
					for(int i = 0; i < 1; i++){
						PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 146:	77 e0       	ldi	r23, 0x07	; 7
 148:	b7 2e       	mov	r11, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14a:	c8 ec       	ldi	r28, 0xC8	; 200
 14c:	d0 e0       	ldi	r29, 0x00	; 0
						_delay_ms(150);
						PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	c6 2e       	mov	r12, r22

	USART_Init(51); //Initilize to 9600bps
	for(;;){

        //I1 is 1000 (S0 S1 S2 S3) - PB3 is high
		PORTB = (1 << PB2) | (1 << PB3) | (0 << PB4) | (0 << PB5) | (0 << PB6);			
 152:	a8 ba       	out	0x18, r10	; 24
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 154:	5f 9b       	sbis	0x0b, 7	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <main+0x42>
	return UDR; //Get and return received data from buffer 
 158:	8c b1       	in	r24, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x48>
	UDR = data; //Put data into buffer, sends the data 
 15e:	8c b9       	out	0x0c, r24	; 12

		data2 = USART_Receive();
		USART_Transmit(data2);

		
		if(data2 == 0x52){ //if data = R	
 160:	82 35       	cpi	r24, 0x52	; 82
 162:	b9 f7       	brne	.-18     	; 0x152 <main+0x40>
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 164:	5f 9b       	sbis	0x0b, 7	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <main+0x52>
	return UDR; //Get and return received data from buffer 
 168:	8c b1       	in	r24, 0x0c	; 12
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 16a:	5f 9b       	sbis	0x0b, 7	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x58>
	return UDR; //Get and return received data from buffer 
 16e:	0c b1       	in	r16, 0x0c	; 12
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 170:	5f 9b       	sbis	0x0b, 7	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x5e>
	return UDR; //Get and return received data from buffer 
 174:	dc b0       	in	r13, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x64>
	UDR = data; //Put data into buffer, sends the data 
 17a:	8c b9       	out	0x0c, r24	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 17c:	5d 9b       	sbis	0x0b, 5	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <main+0x6a>
	UDR = data; //Put data into buffer, sends the data 
 180:	0c b9       	out	0x0c, r16	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 182:	5d 9b       	sbis	0x0b, 5	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x70>
	UDR = data; //Put data into buffer, sends the data 
 186:	dc b8       	out	0x0c, r13	; 12
			USART_Transmit(storage[0]); //output the distance
			USART_Transmit(storage[1]);
			USART_Transmit(storage[2]);

			//convert to a number, makes it easier to use
			hun = convert(storage[0]);
 188:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
 18c:	7c 01       	movw	r14, r24
  			ten = convert(storage[1]);
 18e:	80 2f       	mov	r24, r16
 190:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
 194:	8c 01       	movw	r16, r24
  			one = convert(storage[2]);
 196:	8d 2d       	mov	r24, r13
 198:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
	
			//make it integer total value
			hun = (hun - base) * 100;
 19c:	20 ed       	ldi	r18, 0xD0	; 208
 19e:	3f ef       	ldi	r19, 0xFF	; 255
 1a0:	e2 0e       	add	r14, r18
 1a2:	f3 1e       	adc	r15, r19
  			ten = (ten - base) * 10;
 1a4:	00 53       	subi	r16, 0x30	; 48
 1a6:	10 40       	sbci	r17, 0x00	; 0
  			one = one - base;
  
 			final = hun + ten + one; //final value should match storage
 1a8:	9c 01       	movw	r18, r24
 1aa:	20 53       	subi	r18, 0x30	; 48
 1ac:	30 40       	sbci	r19, 0x00	; 0

			//test cases
			if(final >= 40 && final <= 80){ //vibrate if
 1ae:	e8 9c       	mul	r14, r8
 1b0:	c0 01       	movw	r24, r0
 1b2:	e9 9c       	mul	r14, r9
 1b4:	90 0d       	add	r25, r0
 1b6:	f8 9c       	mul	r15, r8
 1b8:	90 0d       	add	r25, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	28 0f       	add	r18, r24
 1be:	39 1f       	adc	r19, r25
 1c0:	c8 01       	movw	r24, r16
 1c2:	53 e0       	ldi	r21, 0x03	; 3
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	5a 95       	dec	r21
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0xb2>
 1cc:	00 0f       	add	r16, r16
 1ce:	11 1f       	adc	r17, r17
 1d0:	80 0f       	add	r24, r16
 1d2:	91 1f       	adc	r25, r17
 1d4:	28 0f       	add	r18, r24
 1d6:	39 1f       	adc	r19, r25
 1d8:	c9 01       	movw	r24, r18
 1da:	88 97       	sbiw	r24, 0x28	; 40
 1dc:	89 97       	sbiw	r24, 0x29	; 41
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <main+0xd0>
 1e0:	b8 cf       	rjmp	.-144    	; 0x152 <main+0x40>
				if(final >= 70 && final < 80){
 1e2:	c9 01       	movw	r24, r18
 1e4:	86 54       	subi	r24, 0x46	; 70
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ea:	88 f4       	brcc	.+34     	; 0x20e <main+0xfc>
					for(int i = 0; i < 1; i++){
						PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 1ec:	b8 ba       	out	0x18, r11	; 24
 1ee:	8c ed       	ldi	r24, 0xDC	; 220
 1f0:	95 e0       	ldi	r25, 0x05	; 5
 1f2:	fe 01       	movw	r30, r28
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xe2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0xe0>
						_delay_ms(150);
						PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 1fc:	c8 ba       	out	0x18, r12	; 24
 1fe:	8c ef       	ldi	r24, 0xFC	; 252
 200:	98 e0       	ldi	r25, 0x08	; 8
 202:	fe 01       	movw	r30, r28
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 208:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	d9 f7       	brne	.-10     	; 0x202 <main+0xf0>
 20c:	a2 cf       	rjmp	.-188    	; 0x152 <main+0x40>
						_delay_ms(230);
					}
				}
				else if(final >= 60 && final < 70){
 20e:	c9 01       	movw	r24, r18
 210:	cc 97       	sbiw	r24, 0x3c	; 60
 212:	0a 97       	sbiw	r24, 0x0a	; 10
 214:	88 f4       	brcc	.+34     	; 0x238 <main+0x126>
					for(int i = 0; i < 1; i++){	
						PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 216:	b8 ba       	out	0x18, r11	; 24
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	fe 01       	movw	r30, r28
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	d9 f7       	brne	.-10     	; 0x21c <main+0x10a>
						_delay_ms(180);
						PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 226:	c8 ba       	out	0x18, r12	; 24
 228:	8c ed       	ldi	r24, 0xDC	; 220
 22a:	95 e0       	ldi	r25, 0x05	; 5
 22c:	fe 01       	movw	r30, r28
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 234:	d9 f7       	brne	.-10     	; 0x22c <main+0x11a>
 236:	8d cf       	rjmp	.-230    	; 0x152 <main+0x40>
						_delay_ms(150);
					} 
				}
				else if(final >= 50 && final < 60){
 238:	22 53       	subi	r18, 0x32	; 50
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	2a 30       	cpi	r18, 0x0A	; 10
 23e:	31 05       	cpc	r19, r1
 240:	88 f4       	brcc	.+34     	; 0x264 <main+0x152>
					for(int i = 0; i < 1; i++){
						PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 242:	b8 ba       	out	0x18, r11	; 24
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	97 e0       	ldi	r25, 0x07	; 7
 248:	fe 01       	movw	r30, r28
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d9 f7       	brne	.-10     	; 0x248 <main+0x136>
						_delay_ms(180);
						PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 252:	c8 ba       	out	0x18, r12	; 24
 254:	82 ee       	ldi	r24, 0xE2	; 226
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	fe 01       	movw	r30, r28
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 260:	d9 f7       	brne	.-10     	; 0x258 <main+0x146>
 262:	77 cf       	rjmp	.-274    	; 0x152 <main+0x40>
						_delay_ms(125);
					}
				}
				else{
					for(int i = 0; i < 1; i++){
						PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 264:	b8 ba       	out	0x18, r11	; 24
 266:	8c ed       	ldi	r24, 0xDC	; 220
 268:	95 e0       	ldi	r25, 0x05	; 5
 26a:	fe 01       	movw	r30, r28
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x15a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 270:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 272:	d9 f7       	brne	.-10     	; 0x26a <main+0x158>
						_delay_ms(150);
						PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 274:	c8 ba       	out	0x18, r12	; 24
 276:	88 ee       	ldi	r24, 0xE8	; 232
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	fe 01       	movw	r30, r28
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <main+0x168>
 284:	66 cf       	rjmp	.-308    	; 0x152 <main+0x40>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
