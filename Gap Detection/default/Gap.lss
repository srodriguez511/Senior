
Gap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005b  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000039c  00000000  00000000  0000036f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d0  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000344  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000153  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000178  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
		
	}
	return 0;
}
void USART_Init( unsigned int baud )
{
  92:	90 bd       	out	0x20, r25	; 32
	UBRRH = (baud >> 8); ///Set baud rate
	UBRRL = baud;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Transmit>
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
  a4:	8c b9       	out	0x0c, r24	; 12
 }
  a6:	08 95       	ret

000000a8 <USART_Receive>:
unsigned char USART_Receive( void )
{
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <USART_Receive>
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
	return UDR; //Get and return received data from buffer 
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <convert>:

//convert the ascii chars to dec 
int convert(char achar){
  b0:	80 33       	cpi	r24, 0x30	; 48
  b2:	19 f4       	brne	.+6      	; 0xba <convert+0xa>
  b4:	20 e3       	ldi	r18, 0x30	; 48
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	2a c0       	rjmp	.+84     	; 0x10e <convert+0x5e>
  if(achar == '0')  	 
  	return 48;
  else if(achar == '1')  
  ba:	81 33       	cpi	r24, 0x31	; 49
  bc:	19 f4       	brne	.+6      	; 0xc4 <convert+0x14>
  be:	21 e3       	ldi	r18, 0x31	; 49
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	25 c0       	rjmp	.+74     	; 0x10e <convert+0x5e>
  	return 49;
  else if(achar == '2')  
  c4:	82 33       	cpi	r24, 0x32	; 50
  c6:	19 f4       	brne	.+6      	; 0xce <convert+0x1e>
  c8:	22 e3       	ldi	r18, 0x32	; 50
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	20 c0       	rjmp	.+64     	; 0x10e <convert+0x5e>
  	return 50;
  else if(achar == '3')  
  ce:	83 33       	cpi	r24, 0x33	; 51
  d0:	19 f4       	brne	.+6      	; 0xd8 <convert+0x28>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	1b c0       	rjmp	.+54     	; 0x10e <convert+0x5e>
  	return 51;
  else if(achar == '4')  
  d8:	84 33       	cpi	r24, 0x34	; 52
  da:	19 f4       	brne	.+6      	; 0xe2 <convert+0x32>
  dc:	24 e3       	ldi	r18, 0x34	; 52
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	16 c0       	rjmp	.+44     	; 0x10e <convert+0x5e>
  	return 52;
  else if(achar == '5')  
  e2:	85 33       	cpi	r24, 0x35	; 53
  e4:	19 f4       	brne	.+6      	; 0xec <convert+0x3c>
  e6:	25 e3       	ldi	r18, 0x35	; 53
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	11 c0       	rjmp	.+34     	; 0x10e <convert+0x5e>
  	return 53;
  else if(achar == '6')  
  ec:	86 33       	cpi	r24, 0x36	; 54
  ee:	19 f4       	brne	.+6      	; 0xf6 <convert+0x46>
  f0:	26 e3       	ldi	r18, 0x36	; 54
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	0c c0       	rjmp	.+24     	; 0x10e <convert+0x5e>
  	return 54;
  else if(achar == '7')  
  f6:	87 33       	cpi	r24, 0x37	; 55
  f8:	19 f4       	brne	.+6      	; 0x100 <convert+0x50>
  fa:	27 e3       	ldi	r18, 0x37	; 55
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	07 c0       	rjmp	.+14     	; 0x10e <convert+0x5e>
  	return 55;
  else if(achar == '8')  
 100:	88 33       	cpi	r24, 0x38	; 56
 102:	19 f0       	breq	.+6      	; 0x10a <convert+0x5a>
 104:	29 e3       	ldi	r18, 0x39	; 57
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <convert+0x5e>
 10a:	28 e3       	ldi	r18, 0x38	; 56
 10c:	30 e0       	ldi	r19, 0x00	; 0
  	return 56;
  else					 
  	return 57;
}
 10e:	c9 01       	movw	r24, r18
 110:	08 95       	ret

00000112 <main>:
void USART_Init(unsigned int baud); //Init Baud
void USART_Transmit(unsigned char data); //Transmission
unsigned char USART_Receive(void); //Receive
int convert(char);

int main(){
 112:	2f 92       	push	r2
 114:	3f 92       	push	r3
 116:	4f 92       	push	r4
 118:	5f 92       	push	r5
 11a:	6f 92       	push	r6
 11c:	7f 92       	push	r7
 11e:	8f 92       	push	r8
 120:	9f 92       	push	r9
 122:	af 92       	push	r10
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	int hun = 0, ten = 0, one = 0, final = 0;
	int base = 48;
	int countSetup = 0;
	int sumDist = 0;
	int minDist = 0, maxDist = 0, averageDist = 0;
	DDRB = 0b11111111;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	87 bb       	out	0x17, r24	; 23
	}
	return 0;
}
void USART_Init( unsigned int baud )
{
	UBRRH = (baud >> 8); ///Set baud rate
 13a:	10 bc       	out	0x20, r1	; 32
	UBRRL = baud;
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
 144:	86 e8       	ldi	r24, 0x86	; 134
 146:	80 bd       	out	0x20, r24	; 32
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	aa 24       	eor	r10, r10
 14e:	bb 24       	eor	r11, r11
 150:	66 24       	eor	r6, r6
 152:	77 24       	eor	r7, r7
 154:	88 24       	eor	r8, r8
 156:	99 24       	eor	r9, r9
			//make it integer total value
			hun = (hun - base) * 100;
  			ten = (ten - base) * 10;
  			one = one - base;
  
 			final = hun + ten + one; //final value should match storage
 158:	e4 e6       	ldi	r30, 0x64	; 100
 15a:	2e 2e       	mov	r2, r30
 15c:	31 2c       	mov	r3, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	78 ec       	ldi	r23, 0xC8	; 200
 160:	47 2e       	mov	r4, r23
 162:	51 2c       	mov	r5, r1
			else{
				//test cases
				if(final < minDist || final > maxDist ){ //vibrate if
					PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
					_delay_ms(180);
					PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 164:	64 e0       	ldi	r22, 0x04	; 4
 166:	c6 2e       	mov	r12, r22

	USART_Init(51); //Initilize to 9600bps
	for(;;){

        //I1 is 1000 (S0 S1 S2 S3) - PB3 is high
		PORTB = (1 << PB2) | (1 << PB3) | (0 << PB4) | (0 << PB5) | (0 << PB6);			
 168:	2c e0       	ldi	r18, 0x0C	; 12
 16a:	28 bb       	out	0x18, r18	; 24
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 16c:	5f 9b       	sbis	0x0b, 7	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0x5a>
	return UDR; //Get and return received data from buffer 
 170:	8c b1       	in	r24, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0x60>
	UDR = data; //Put data into buffer, sends the data 
 176:	8c b9       	out	0x0c, r24	; 12
		PORTB = (1 << PB2) | (1 << PB3) | (0 << PB4) | (0 << PB5) | (0 << PB6);			

		data2 = USART_Receive();
		USART_Transmit(data2);		

		if(data2 == 0x52){ //if data = R	
 178:	82 35       	cpi	r24, 0x52	; 82
 17a:	b1 f7       	brne	.-20     	; 0x168 <main+0x56>
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 17c:	5f 9b       	sbis	0x0b, 7	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <main+0x6a>
	return UDR; //Get and return received data from buffer 
 180:	8c b1       	in	r24, 0x0c	; 12
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 182:	5f 9b       	sbis	0x0b, 7	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x70>
	return UDR; //Get and return received data from buffer 
 186:	0c b1       	in	r16, 0x0c	; 12
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
	UDR = data; //Put data into buffer, sends the data 
 }
unsigned char USART_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) ); //Wait for data to be received 
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x76>
	return UDR; //Get and return received data from buffer 
 18c:	dc b0       	in	r13, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 18e:	5d 9b       	sbis	0x0b, 5	; 11
 190:	fe cf       	rjmp	.-4      	; 0x18e <main+0x7c>
	UDR = data; //Put data into buffer, sends the data 
 192:	8c b9       	out	0x0c, r24	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 194:	5d 9b       	sbis	0x0b, 5	; 11
 196:	fe cf       	rjmp	.-4      	; 0x194 <main+0x82>
	UDR = data; //Put data into buffer, sends the data 
 198:	0c b9       	out	0x0c, r16	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN); //Enable RX and TX
	UCSRC = (1<<URSEL)  | (3<<UCSZ0) ; //8 data bits . 1 stop bit.
}
void USART_Transmit( unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) ); // Wait for empty transmit buffer 
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x88>
	UDR = data; //Put data into buffer, sends the data 
 19e:	dc b8       	out	0x0c, r13	; 12
			USART_Transmit(storage[0]); //output the distance
			USART_Transmit(storage[1]);
			USART_Transmit(storage[2]);

			//convert to a number, makes it easier to use
			hun = convert(storage[0]);
 1a0:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
 1a4:	7c 01       	movw	r14, r24
  			ten = convert(storage[1]);
 1a6:	80 2f       	mov	r24, r16
 1a8:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
 1ac:	8c 01       	movw	r16, r24
  			one = convert(storage[2]);
 1ae:	8d 2d       	mov	r24, r13
 1b0:	0e 94 58 00 	call	0xb0	; 0xb0 <convert>
	
			//make it integer total value
			hun = (hun - base) * 100;
 1b4:	20 ed       	ldi	r18, 0xD0	; 208
 1b6:	3f ef       	ldi	r19, 0xFF	; 255
 1b8:	e2 0e       	add	r14, r18
 1ba:	f3 1e       	adc	r15, r19
  			ten = (ten - base) * 10;
 1bc:	00 53       	subi	r16, 0x30	; 48
 1be:	10 40       	sbci	r17, 0x00	; 0
  			one = one - base;
  
 			final = hun + ten + one; //final value should match storage
 1c0:	9c 01       	movw	r18, r24
 1c2:	20 53       	subi	r18, 0x30	; 48
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	e2 9c       	mul	r14, r2
 1c8:	c0 01       	movw	r24, r0
 1ca:	e3 9c       	mul	r14, r3
 1cc:	90 0d       	add	r25, r0
 1ce:	f2 9c       	mul	r15, r2
 1d0:	90 0d       	add	r25, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	28 0f       	add	r18, r24
 1d6:	39 1f       	adc	r19, r25
 1d8:	c8 01       	movw	r24, r16
 1da:	53 e0       	ldi	r21, 0x03	; 3
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	5a 95       	dec	r21
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0xca>
 1e4:	00 0f       	add	r16, r16
 1e6:	11 1f       	adc	r17, r17
 1e8:	80 0f       	add	r24, r16
 1ea:	91 1f       	adc	r25, r17
 1ec:	28 0f       	add	r18, r24
 1ee:	39 1f       	adc	r19, r25

			if(countSetup <= 100){
 1f0:	c5 36       	cpi	r28, 0x65	; 101
 1f2:	d1 05       	cpc	r29, r1
 1f4:	9c f4       	brge	.+38     	; 0x21c <main+0x10a>
				sumDist += final;
 1f6:	a2 0e       	add	r10, r18
 1f8:	b3 1e       	adc	r11, r19
				countSetup++;
 1fa:	21 96       	adiw	r28, 0x01	; 1
				averageDist = sumDist / countSetup;
 1fc:	c5 01       	movw	r24, r10
 1fe:	be 01       	movw	r22, r28
 200:	0e 94 27 01 	call	0x24e	; 0x24e <__divmodhi4>
				//averageDist = 29;
				minDist = averageDist - 10;
 204:	36 ef       	ldi	r19, 0xF6	; 246
 206:	63 2e       	mov	r6, r19
 208:	3f ef       	ldi	r19, 0xFF	; 255
 20a:	73 2e       	mov	r7, r19
 20c:	66 0e       	add	r6, r22
 20e:	77 1e       	adc	r7, r23
				maxDist = averageDist + 10;
 210:	2a e0       	ldi	r18, 0x0A	; 10
 212:	82 2e       	mov	r8, r18
 214:	91 2c       	mov	r9, r1
 216:	86 0e       	add	r8, r22
 218:	97 1e       	adc	r9, r23
 21a:	a6 cf       	rjmp	.-180    	; 0x168 <main+0x56>
			}			
			else{
				//test cases
				if(final < minDist || final > maxDist ){ //vibrate if
 21c:	26 15       	cp	r18, r6
 21e:	37 05       	cpc	r19, r7
 220:	24 f0       	brlt	.+8      	; 0x22a <main+0x118>
 222:	82 16       	cp	r8, r18
 224:	93 06       	cpc	r9, r19
 226:	0c f0       	brlt	.+2      	; 0x22a <main+0x118>
 228:	9f cf       	rjmp	.-194    	; 0x168 <main+0x56>
					PORTB = (1 << PB0) | (1 << PB1) | (1 << PB2);
 22a:	37 e0       	ldi	r19, 0x07	; 7
 22c:	38 bb       	out	0x18, r19	; 24
 22e:	88 e0       	ldi	r24, 0x08	; 8
 230:	97 e0       	ldi	r25, 0x07	; 7
 232:	f2 01       	movw	r30, r4
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x122>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 238:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23a:	d9 f7       	brne	.-10     	; 0x232 <main+0x120>
					_delay_ms(180);
					PORTB = (0 << PB0) | (0 << PB1) | (1 << PB2);
 23c:	c8 ba       	out	0x18, r12	; 24
 23e:	8c ed       	ldi	r24, 0xDC	; 220
 240:	95 e0       	ldi	r25, 0x05	; 5
 242:	f2 01       	movw	r30, r4
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x132>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24a:	d9 f7       	brne	.-10     	; 0x242 <main+0x130>
 24c:	8d cf       	rjmp	.-230    	; 0x168 <main+0x56>

0000024e <__divmodhi4>:
 24e:	97 fb       	bst	r25, 7
 250:	09 2e       	mov	r0, r25
 252:	07 26       	eor	r0, r23
 254:	0a d0       	rcall	.+20     	; 0x26a <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	04 d0       	rcall	.+8      	; 0x262 <__divmodhi4_neg2>
 25a:	0c d0       	rcall	.+24     	; 0x274 <__udivmodhi4>
 25c:	06 d0       	rcall	.+12     	; 0x26a <__divmodhi4_neg1>
 25e:	00 20       	and	r0, r0
 260:	1a f4       	brpl	.+6      	; 0x268 <__divmodhi4_exit>

00000262 <__divmodhi4_neg2>:
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255

00000268 <__divmodhi4_exit>:
 268:	08 95       	ret

0000026a <__divmodhi4_neg1>:
 26a:	f6 f7       	brtc	.-4      	; 0x268 <__divmodhi4_exit>
 26c:	90 95       	com	r25
 26e:	81 95       	neg	r24
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__udivmodhi4>:
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	51 e1       	ldi	r21, 0x11	; 17
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__udivmodhi4_ep>

0000027c <__udivmodhi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a6 17       	cp	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	10 f0       	brcs	.+4      	; 0x28a <__udivmodhi4_ep>
 286:	a6 1b       	sub	r26, r22
 288:	b7 0b       	sbc	r27, r23

0000028a <__udivmodhi4_ep>:
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	5a 95       	dec	r21
 290:	a9 f7       	brne	.-22     	; 0x27c <__udivmodhi4_loop>
 292:	80 95       	com	r24
 294:	90 95       	com	r25
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
